/* tslint: disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.21.6150.29665 (NJsonSchema v5.12.6149.949) (http://NSwag.org)
// </auto-generated>
//----------------------

export class Client {
    private baseUrl: string; 
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
	protected jsonParseReviver: (key: string, value: any) => any = undefined; 

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.baseUrl = baseUrl ? baseUrl : "";
        this.http = http ? http : window;
    }

    /**
     * @return Success
     */
    edityCompileStatusGet(bearer: string): Promise<CompilerStatus> {
        let url_ = this.baseUrl + "/edity/Compile/Status"; 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityCompileStatusGet(response);
        });
    }

    private processEdityCompileStatusGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: CompilerStatus = null; 
                result200 = data === "" ? null : <CompilerStatus>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityCompilePost(bearer: string): Promise<CompilerResult> {
        let url_ = this.baseUrl + "/edity/Compile"; 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityCompilePost(response);
        });
    }

    private processEdityCompilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: CompilerResult = null; 
                result200 = data === "" ? null : <CompilerResult>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitUncommittedChangesGet(bearer: string): Promise<UncommittedChange[]> {
        let url_ = this.baseUrl + "/edity/Git/UncommittedChanges"; 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitUncommittedChangesGet(response);
        });
    }

    private processEdityGitUncommittedChangesGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: UncommittedChange[] = null; 
                result200 = data === "" ? null : <UncommittedChange[]>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitSyncInfoGet(bearer: string): Promise<SyncInfo> {
        let url_ = this.baseUrl + "/edity/Git/SyncInfo"; 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitSyncInfoGet(response);
        });
    }

    private processEdityGitSyncInfoGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: SyncInfo = null; 
                result200 = data === "" ? null : <SyncInfo>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitUncommittedDiffByFileGet(file: string, bearer: string): Promise<DiffInfo> {
        let url_ = this.baseUrl + "/edity/Git/UncommittedDiff/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitUncommittedDiffByFileGet(response);
        });
    }

    private processEdityGitUncommittedDiffByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: DiffInfo = null; 
                result200 = data === "" ? null : <DiffInfo>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitHistoryGet(page: number, count: number, bearer: string): Promise<History[]> {
        let url_ = this.baseUrl + "/edity/Git/History?"; 

        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&"; 
        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitHistoryGet(response);
        });
    }

    private processEdityGitHistoryGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: History[] = null; 
                result200 = data === "" ? null : <History[]>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitHistoryCountByFileGet(file: string, bearer: string): Promise<number> {
        let url_ = this.baseUrl + "/edity/Git/HistoryCount/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitHistoryCountByFileGet(response);
        });
    }

    private processEdityGitHistoryCountByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: number = null; 
                result200 = data === "" ? null : <number>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitConflictsGet(bearer: string): Promise<ConflictInfo[]> {
        let url_ = this.baseUrl + "/edity/Git/Conflicts"; 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitConflictsGet(response);
        });
    }

    private processEdityGitConflictsGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: ConflictInfo[] = null; 
                result200 = data === "" ? null : <ConflictInfo[]>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitMergeInfoByFileGet(file: string, bearer: string): Promise<MergeInfo> {
        let url_ = this.baseUrl + "/edity/Git/MergeInfo/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitMergeInfoByFileGet(response);
        });
    }

    private processEdityGitMergeInfoByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: MergeInfo = null; 
                result200 = data === "" ? null : <MergeInfo>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitHistoryByFileGet(file: string, page: number, count: number, bearer: string): Promise<History[]> {
        let url_ = this.baseUrl + "/edity/Git/History/{file}?"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&"; 
        if (count !== undefined)
            url_ += "count=" + encodeURIComponent("" + count) + "&"; 
        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitHistoryByFileGet(response);
        });
    }

    private processEdityGitHistoryByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: History[] = null; 
                result200 = data === "" ? null : <History[]>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitFileVersionByShaByFileGet(sha: string, file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/FileVersion/{sha}/{file}"; 

        if (sha === undefined || sha === null)
            throw new Error("The parameter 'sha' must be defined.");
        url_ = url_.replace("{sha}", encodeURIComponent("" + sha)); 
        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitFileVersionByShaByFileGet(response);
        });
    }

    private processEdityGitFileVersionByShaByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitCommitPost(newCommit: NewCommit, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/Commit"; 

        const content_ = JSON.stringify(newCommit);
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitCommitPost(response);
        });
    }

    private processEdityGitCommitPost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitPullPost(bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/Pull"; 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitPullPost(response);
        });
    }

    private processEdityGitPullPost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitPushPost(bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/Push"; 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitPushPost(response);
        });
    }

    private processEdityGitPushPost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitResolveByFilePost(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/Resolve/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitResolveByFilePost(response);
        });
    }

    private processEdityGitResolveByFilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityGitRevertByFilePost(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Git/Revert/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityGitRevertByFilePost(response);
        });
    }

    private processEdityGitRevertByFilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPreviewByFileGet(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/preview/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPreviewByFileGet(response);
        });
    }

    private processEdityPreviewByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPageSettingsByFileGet(file: string, bearer: string): Promise<PageSettings> {
        let url_ = this.baseUrl + "/edity/Page/Settings/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPageSettingsByFileGet(response);
        });
    }

    private processEdityPageSettingsByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: PageSettings = null; 
                result200 = data === "" ? null : <PageSettings>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPageSettingsByFilePost(file: string, settings: PageSettings, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Page/Settings/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = JSON.stringify(settings);
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPageSettingsByFilePost(response);
        });
    }

    private processEdityPageSettingsByFilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "400") {
                let result400: ModelStateErrorResult = null; 
                result400 = data === "" ? null : <ModelStateErrorResult>JSON.parse(data, this.jsonParseReviver);
                throw result400; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPageByFilePost(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Page/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPageByFilePost(response);
        });
    }

    private processEdityPageByFilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPageByFileDelete(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Page/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "DELETE",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPageByFileDelete(response);
        });
    }

    private processEdityPageByFileDelete(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityPageAssetByPageUrlPost(pageUrl: string, bearer: string): Promise<ImageUploadResponse> {
        let url_ = this.baseUrl + "/edity/Page/Asset/{pageUrl}"; 

        if (pageUrl === undefined || pageUrl === null)
            throw new Error("The parameter 'pageUrl' must be defined.");
        url_ = url_.replace("{pageUrl}", encodeURIComponent("" + pageUrl)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityPageAssetByPageUrlPost(response);
        });
    }

    private processEdityPageAssetByPageUrlPost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: ImageUploadResponse = null; 
                result200 = data === "" ? null : <ImageUploadResponse>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityShutdownPost(bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/Shutdown"; 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityShutdownPost(response);
        });
    }

    private processEdityShutdownPost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityTemplatesGet(bearer: string): Promise<Template[]> {
        let url_ = this.baseUrl + "/edity/templates"; 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityTemplatesGet(response);
        });
    }

    private processEdityTemplatesGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
                let result200: Template[] = null; 
                result200 = data === "" ? null : <Template[]>JSON.parse(data, this.jsonParseReviver);
                return result200; 
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityListByFileGet(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/list/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        return this.http.fetch(url_, {
            method: "GET",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityListByFileGet(response);
        });
    }

    private processEdityListByFileGet(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityUploadByFilePost(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/upload/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "POST",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityUploadByFilePost(response);
        });
    }

    private processEdityUploadByFilePost(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }

    /**
     * @return Success
     */
    edityUploadByFileDelete(file: string, bearer: string): Promise<void> {
        let url_ = this.baseUrl + "/edity/upload/{file}"; 

        if (file === undefined || file === null)
            throw new Error("The parameter 'file' must be defined.");
        url_ = url_.replace("{file}", encodeURIComponent("" + file)); 

        const content_ = "";
        return this.http.fetch(url_, {
			body: content_,
            method: "DELETE",
            headers: {
                "bearer": bearer, 
                "Content-Type": "application/json; charset=UTF-8"
            }
        }).then((response) => {
            return this.processEdityUploadByFileDelete(response);
        });
    }

    private processEdityUploadByFileDelete(response: Response) {
        return response.text().then((data) => {
            const status = response.status.toString(); 

            if (status === "200") {
            }
            else
            if (status === "500") {
                let result500: ExceptionResult = null; 
                result500 = data === "" ? null : <ExceptionResult>JSON.parse(data, this.jsonParseReviver);
                throw result500; 
            }
            else
            {
                throw new Error("error_no_callback_for_the_received_http_status"); 
            }
        });
    }
}

export interface CompilerStatus {
    readonly behindBy: number;
    readonly behindHistory: any;
}

export interface ExceptionResult {
    exception: any;
    message: string;
}

export interface CompilerResult {
    elapsedSeconds: number;
}

export interface UncommittedChange {
    readonly filePath: string;
    readonly state: UncommittedChangeState;
}

export interface SyncInfo {
    aheadBy: number;
    behindBy: number;
    aheadHistory: History[];
    behindHistory: History[];
    hasUncomittedChanges: boolean;
}

export interface History {
    readonly message: string;
    readonly sha: string;
    readonly name: string;
    readonly email: string;
    readonly when: Date;
}

export interface DiffInfo {
    original: string;
    changed: string;
}

export interface ConflictInfo {
    readonly filePath: string;
}

export interface MergeInfo {
    merged: string;
    theirs: string;
    mine: string;
}

export interface NewCommit {
    message: string;
}

export interface PageSettings {
    title: string;
}

export interface ModelStateErrorResult {
    errors: { [key: string] : string; };
    message: string;
}

export interface ImageUploadResponse {
    uploaded: number;
    fileName: string;
    url: string;
    message: string;
}

export interface Template {
    path: string;
}

export enum UncommittedChangeState {
    Nonexistent = <any>"Nonexistent", 
    Unaltered = <any>"Unaltered", 
    Added = <any>"Added", 
    Removed = <any>"Removed", 
    Renamed = <any>"Renamed", 
    Modified = <any>"Modified", 
    Unreadable = <any>"Unreadable", 
    Ignored = <any>"Ignored", 
    Conflicted = <any>"Conflicted", 
}